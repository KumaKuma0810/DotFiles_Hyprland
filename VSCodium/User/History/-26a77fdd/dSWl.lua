-- =========================================
-- –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π Neovim —Å LSP –∏ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç
-- =========================================
-- Enhanced custom colorscheme with more diverse text colors
vim.opt.background = 'dark'
vim.opt.termguicolors = true

-- Enable filetype detection and plugins
vim.cmd('filetype plugin indent on')

-- Set termguicolors
vim.opt.termguicolors = true
-- –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
vim.cmd [[
hi Normal guibg=NONE ctermbg=NONE
hi NormalFloat guibg=NONE ctermbg=NONE
]]

-- ================================
-- 1. –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
-- ================================
vim.opt.number = true
vim.opt.expandtab = true
vim.opt.shiftwidth = 4
vim.opt.tabstop = 4
vim.opt.smartindent = true
vim.opt.wrap = true
vim.opt.termguicolors = true
vim.opt.cursorline = true
vim.opt.signcolumn = "yes"
vim.opt.completeopt = "menu,menuone,noselect"
vim.o.linebreak = true
vim.o.breakindent = true
vim.o.showbreak = "‚Ü≥ "
-- ================================
-- 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ lazy.nvim
-- ================================
local lazypath = vim.fn.stdpath("data").."/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
	vim.fn.system({
		"git",
		"clone",
		"--filter=blob:none",
		"https://github.com/folke/lazy.nvim.git",
		"--branch=stable",
		lazypath,
	})
end
vim.opt.rtp:prepend(lazypath)

-- ================================
-- 3. –ü–ª–∞–≥–∏–Ω—ã
-- ================================
require("lazy").setup({

	-- –¢–µ—Ä–º–∏–Ω–∞–ª
	{
		"akinsho/toggleterm.nvim",
		version = "*",
		config = function()
			require("toggleterm").setup({
				size = 15,
				open_mapping = [[<C-\>]],
				hide_numbers = true,
				shade_terminals = true,
				shading_factor = 2,
				start_in_insert = true,
				persist_size = true,
				direction = "horizontal",
			})
			vim.keymap.set("n", "<leader>tt", ":ToggleTerm<CR>", { noremap = true, silent = true })
			vim.keymap.set("t", "<Esc>", [[<C-\><C-n>]], { noremap = true, silent = true })
		end,
	},
    {
        "sainnhe/everforest",
        config = function()
        -- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã
        vim.g.everforest_background = "hard"        -- hard, medium, soft
        vim.g.everforest_transparent_background = 1
        vim.g.everforest_better_performance = 1
        -- –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–µ–º—É
        vim.cmd([[colorscheme everforest]])
        end,
  },

	-- Mason
	{
		"williamboman/mason.nvim",
		config = function() require("mason").setup() end
	},

	-- Mason + LSP
	{
		"williamboman/mason-lspconfig.nvim",
		dependencies = "williamboman/mason.nvim",
		config = function()
			require("mason-lspconfig").setup {
				ensure_installed = { "pylsp", "clangd", "gopls", "lua_ls" }
			}
		end
	},
    {
        "goolord/alpha-nvim",
        dependencies = { "nvim-tree/nvim-web-devicons" },
        config = function()
          require'alpha'.setup(require'alpha.themes.dashboard'.config)
        end
    },
	-- LSP
	{ "neovim/nvim-lspconfig" },

	-- –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
	{
		"hrsh7th/nvim-cmp",
		dependencies = {
			"hrsh7th/cmp-nvim-lsp",
			"hrsh7th/cmp-buffer",
			"hrsh7th/cmp-path",
			"L3MON4D3/LuaSnip",
			"saadparwaiz1/cmp_luasnip"
		},
		config = function()
			local cmp = require("cmp")
			local luasnip = require("luasnip")

			cmp.setup({
				snippet = {
					expand = function(args)
						luasnip.lsp_expand(args.body)
					end,
				},
				mapping = {
					["<Tab>"] = cmp.mapping(function(fallback)
						if cmp.visible() then
							cmp.select_next_item()
						elseif luasnip.expand_or_jumpable() then
							luasnip.expand_or_jump()
						else
							fallback()
						end
					end, { "i", "s" }),

					["<S-Tab>"] = cmp.mapping(function(fallback)
						if cmp.visible() then
							cmp.select_prev_item()
						elseif luasnip.jumpable(-1) then
							luasnip.jump(-1)
						else
							fallback()
						end
					end, { "i", "s" }),

					["<CR>"] = cmp.mapping.confirm({ select = true }),
					["<C-Space>"] = cmp.mapping.complete(),
				},
				sources = {
					{ name = "nvim_lsp" },
					{ name = "buffer" },
					{ name = "path" },
					{ name = "luasnip" },
				},
			})
		end,
	},

	-- Tree-sitter
	{
		"nvim-treesitter/nvim-treesitter",
		build = ":TSUpdate",
		event = { "BufReadPost", "BufNewFile" },
		config = function()
			require("nvim-treesitter.configs").setup {
				ensure_installed = { "python", "c", "cpp", "go", "lua", "html", "css", "javascript", "typescript" },
				highlight = { enable = true },
				indent = { enable = true },
			}
		end
	},

	-- –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
	{
		"nvim-tree/nvim-tree.lua",
		dependencies = { "nvim-tree/nvim-web-devicons" },
		config = function()
			require("nvim-tree").setup({
				filters = { dotfiles = true }
			})
			vim.keymap.set("n", "<C-n>", ":NvimTreeToggle<CR>", { noremap = true, silent = true })
		end,
	},

	-- –°—Ç–∞—Ç—É—Å-–±–∞—Ä
	{
		"nvim-lualine/lualine.nvim",
		dependencies = { "nvim-tree/nvim-web-devicons" },
		config = function()
			require("lualine").setup({
				options = {
					icons_enabled = true,
					section_separators = { left = "ÓÇ¥", right = "ÓÇ∂" },
					component_separators = { left = "ÓÇµ", right = "ÓÇ∑" },
				},
			})
		end,
	},

	-- –í–∫–ª–∞–¥–∫–∏
	{
		"akinsho/bufferline.nvim",
		version = "*",
		dependencies = "nvim-tree/nvim-web-devicons",
		config = function()
			require("bufferline").setup({
				options = {
					mode = "buffers",
					numbers = "none",
					diagnostics = "nvim_lsp",
					separator_style = "slant",
					show_buffer_close_icons = true,
					show_close_icon = false,
				},
			})
			vim.keymap.set("n", "<Tab>", ":BufferLineCycleNext<CR>", { noremap = true, silent = true })
			vim.keymap.set("n", "<S-Tab>", ":BufferLineCyclePrev<CR>", { noremap = true, silent = true })
			vim.keymap.set("n", "<C-t>", ":bdelete<CR>", { noremap = true, silent = true })
		end,
	},

	-- Git
	{ "tpope/vim-fugitive", cmd = { "Git", "G" } },
})

-- ================================
-- 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LSP (–Ω–æ–≤—ã–π API)
-- ================================
-- –û–±—â–∏–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
vim.lsp.config("*", {
	on_attach = function(_, bufnr)
		local opts = { noremap=true, silent=true }
		vim.keymap.set("n", "gd", vim.lsp.buf.definition, opts)
		vim.keymap.set("n", "K", vim.lsp.buf.hover, opts)
		vim.keymap.set("n", "<leader>rn", vim.lsp.buf.rename, opts)
	end,
	capabilities = require("cmp_nvim_lsp").default_capabilities(),
})

-- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è Python —á–µ—Ä–µ–∑ pylsp
vim.lsp.config("pylsp", {
	settings = {
		pylsp = {
			plugins = {
				pyflakes = { enabled = true },
				pycodestyle = { enabled = true },
				mccabe = { enabled = true },
				pylsp_mypy = { enabled = true },   -- –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
				yapf = { enabled = false },
			}
		}
	}
})

-- –í–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä
vim.lsp.enable({ "pylsp", "clangd", "gopls", "lua_ls" })
-- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ alpha
local ok, alpha = pcall(require, "alpha")
if not ok then
  return
end

local dashboard = require("alpha.themes.dashboard")

-- ASCII –±–∞–Ω–Ω–µ—Ä
dashboard.section.header.val = {
"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
"‚†Ä‚†Ä‚¢Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°∞‚†Ä‚†Ä",
"‚†Ä‚†Ä‚†ò‚¢∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°æ‚†É‚†Ä‚†Ä",
"‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£∑‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£æ‚†ü‚†Å‚†Ä‚†Ä‚†Ä",
"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚¢ø‚£ø‚£∂‚£¶‚†à‚£ø‚°ü‚¢ª‚°ü‚¢ª‚£ø‚†Å‚£¥‚£∂‚£ø‚°ø‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£â‚†õ‚†ã‚£†‚°ø‚¢Ä‚£æ‚£∑‚°Ä‚¢ø‚£Ñ‚†ô‚†õ‚£â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£¥‚£Ñ‚†Ä‚£ø‚°â‚¢â‚£â‚£§‚£æ‚£ø‚£ø‚£∑‚£§‚£â‚°â‚¢â‚£ø‚†Ä‚£†‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚°Ä‚¢π‚£ß‚†à‚†â‚†õ‚†ã‚¢Å‚°à‚†ô‚†õ‚†â‚†Å‚£º‚°è‚¢Ä‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ß‚†à‚£ø‚£¶‚£Ä‚°Ä‚†Ñ‚¢∏‚°á‚††‚¢Ä‚£Ä‚£¥‚£ø‚†Å‚£º‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†∏‚†ø‚£è‚†Ä‚¢§‚£æ‚£∑‚°§‚†Ä‚£π‚†ø‚†á‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚°§‚†Ä‚£Ä‚£â‚£â‚£Ä‚†Ä‚¢§‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢Ä‚°Ä‚†Ä‚°Ä‚¢Ä‚†Ä‚¢Ä‚°Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†±‚¢∂‚£∂‚£∂‚°∂‚†û‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
}

-- –ö–Ω–æ–ø–∫–∏
dashboard.section.buttons.val = {
  dashboard.button("e", "ÔÖõ  New File", ":ene <BAR> startinsert<CR>"),
  dashboard.button("f", "ÔÄÇ  Find File", ":Telescope find_files<CR>"),
  dashboard.button("r", "ÔÉÖ  Recent Files", ":Telescope oldfiles<CR>"),
  dashboard.button("p", "ÔÅª  Projects", ":Telescope projects<CR>"),
  dashboard.button("q", "Ôôô  Quit", ":qa<CR>"),
}

-- –§—É—Ç–µ—Ä
-- dashboard.section.footer.val = "üíª Code. üé∂ Music. ‚òï Coffee."

-- –¶–≤–µ—Ç–∞ (–≥—Ä—É–ø–ø—ã —Ö–∞–π–ª–∞–π—Ç–∞)
dashboard.section.header.opts.hl = "Type"
dashboard.section.buttons.opts.hl = "Keyword"
dashboard.section.footer.opts.hl = "Comment"

-- –ó–∞–ø—É—Å–∫–∞–µ–º
alpha.setup(dashboard.config)

